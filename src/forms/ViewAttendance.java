/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import java.sql.Statement;
import dao.connectionprovider;
import java.awt.Color;
import java.util.List;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utility.BDutility;
import java.sql.*;
import java.util.HashSet;
import java.util.Set;
import java.sql.Connection;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author venne
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDutility.setImage(this, "images/blackb.jpeg", 1200, 1200);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(6, 6, 6, 6, Color.white));
        DateChooserFrom.setDateFormatString("yyyy-MM-dd");
        DateChooserTo.setDateFormatString("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        DateChooserFrom = new com.toedter.calendar.JDateChooser();
        DateChooserTo = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        From = new javax.swing.JTextField();
        presentLBL = new javax.swing.JTextField();
        lblAbsent = new javax.swing.JTextField();
        absentLBL = new javax.swing.JTextField();
        lblPresent = new javax.swing.JTextField();
        CheckBoxContact = new javax.swing.JCheckBox();
        CheckBoxAddress = new javax.swing.JCheckBox();
        CheckBoxState = new javax.swing.JCheckBox();
        CheckBoxCountry = new javax.swing.JCheckBox();
        CheckBoxUniqueRegId = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1101, 501));
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("View Attendance");

        exit.setText("x");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        DateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DateChooserFromPropertyChange(evt);
            }
        });

        DateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DateChooserToPropertyChange(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField2.setText("Search");

        jTextField4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField4.setText("To");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        From.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        From.setText("From");
        From.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromActionPerformed(evt);
            }
        });

        presentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        presentLBL.setText("Present");
        presentLBL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentLBLActionPerformed(evt);
            }
        });

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setText("--------");
        lblAbsent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblAbsentActionPerformed(evt);
            }
        });

        absentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        absentLBL.setText("Absent");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setText("--------");

        CheckBoxContact.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CheckBoxContact.setForeground(new java.awt.Color(255, 255, 255));
        CheckBoxContact.setText("Contact");
        CheckBoxContact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxContactItemStateChanged(evt);
            }
        });

        CheckBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CheckBoxAddress.setForeground(new java.awt.Color(255, 255, 255));
        CheckBoxAddress.setText("Address");
        CheckBoxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxAddressItemStateChanged(evt);
            }
        });
        CheckBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxAddressActionPerformed(evt);
            }
        });

        CheckBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CheckBoxState.setForeground(new java.awt.Color(255, 255, 255));
        CheckBoxState.setText("State");
        CheckBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxStateItemStateChanged(evt);
            }
        });

        CheckBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CheckBoxCountry.setForeground(new java.awt.Color(255, 255, 255));
        CheckBoxCountry.setText("Country");
        CheckBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxCountryItemStateChanged(evt);
            }
        });

        CheckBoxUniqueRegId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CheckBoxUniqueRegId.setForeground(new java.awt.Color(255, 255, 255));
        CheckBoxUniqueRegId.setText("Unique Reg Id");
        CheckBoxUniqueRegId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxUniqueRegIdItemStateChanged(evt);
            }
        });
        CheckBoxUniqueRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxUniqueRegIdActionPerformed(evt);
            }
        });

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(absentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(presentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPresent, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(CheckBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckBoxUniqueRegId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetFilters)
                        .addGap(56, 56, 56)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(374, 374, 374)
                        .addComponent(exit)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(From, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField4)
                                .addGap(183, 183, 183)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(exit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(From, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(absentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DateChooserTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateChooserFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addComponent(CheckBoxContact)
                        .addGap(20, 20, 20)
                        .addComponent(CheckBoxAddress)
                        .addGap(18, 18, 18)
                        .addComponent(CheckBoxState)
                        .addGap(18, 18, 18)
                        .addComponent(CheckBoxCountry)
                        .addGap(27, 27, 27)
                        .addComponent(CheckBoxUniqueRegId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetFilters)
                        .addGap(28, 28, 28))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void FromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FromActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void presentLBLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentLBLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_presentLBLActionPerformed

    private void lblAbsentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblAbsentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblAbsentActionPerformed

    private void CheckBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxAddressActionPerformed

    private void CheckBoxUniqueRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxUniqueRegIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxUniqueRegIdActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        // TODO add your handling code here:
        txtSearch.setText("");
        DateChooserFrom.setDate(null);
        DateChooserTo.setDate(null);
        CheckBoxContact.setSelected(false);
        CheckBoxAddress.setSelected(false);
        CheckBoxState.setSelected(false);
        CheckBoxCountry.setSelected(false);
        CheckBoxUniqueRegId.setSelected(false);
        loadDataInTable();
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    private void CheckBoxContactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxContactItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();

    }//GEN-LAST:event_CheckBoxContactItemStateChanged

    private void CheckBoxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxAddressItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_CheckBoxAddressItemStateChanged

    private void CheckBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxStateItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_CheckBoxStateItemStateChanged

    private void CheckBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxCountryItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_CheckBoxCountryItemStateChanged

    private void CheckBoxUniqueRegIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxUniqueRegIdItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_CheckBoxUniqueRegIdItemStateChanged

    private void DateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DateChooserFromPropertyChange
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_DateChooserFromPropertyChange

    private void DateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DateChooserToPropertyChange
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_DateChooserToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBoxAddress;
    private javax.swing.JCheckBox CheckBoxContact;
    private javax.swing.JCheckBox CheckBoxCountry;
    private javax.swing.JCheckBox CheckBoxState;
    private javax.swing.JCheckBox CheckBoxUniqueRegId;
    private com.toedter.calendar.JDateChooser DateChooserFrom;
    private com.toedter.calendar.JDateChooser DateChooserTo;
    private javax.swing.JTextField From;
    private javax.swing.JTextField absentLBL;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField lblAbsent;
    private javax.swing.JTextField lblPresent;
    private javax.swing.JTextField presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

private void loadDataInTable() {
    // Initialize the present and absent count labels as 0 before any data is loaded
    lblPresent.setText("0");
    lblAbsent.setText("0");

    List<String> columns = new ArrayList<>(Arrays.asList(
            "ID", "Name", "Gender", "Email", "Date", "CheckIn", "Checkout", "Work Duration"
    ));

    String searchText = txtSearch.getText().trim();  // Trim the search text to avoid extra spaces

    Date fromDateFromCal = DateChooserFrom.getDate();
    LocalDate fromDate = fromDateFromCal != null ? fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate() : null;

    Date toDateFromCal = DateChooserTo.getDate();
    LocalDate toDate = toDateFromCal != null ? toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate() : null;

    // Initialize counts to 0 before each search
    Long presentCount = 0L;
    Long absentCount = 0L;

    String sqlQuery = "SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration " +
                      "FROM userdetails AS ud INNER JOIN userattendance AS ua ON ud.id = ua.userid ";

    // Add conditions for search and date filters
    if (!searchText.isEmpty()) {
        sqlQuery += " WHERE (ud.name LIKE '%" + searchText + "%' OR ud.email LIKE '%" + searchText + "%') ";
    }

    if (fromDate != null && toDate != null) {
        sqlQuery += " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "' ";
    } else if (fromDate != null) {
        sqlQuery += " AND ua.date = '" + fromDate + "' ";
    } else if (toDate != null) {
        sqlQuery += " AND ua.date = '" + toDate + "' ";
    }

    // Initialize table model and reset counts
    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(columns.toArray());
    userTable.setModel(model);

    try (Connection con = connectionprovider.getcon();
         Statement st = con.createStatement();
         ResultSet rs = st.executeQuery(sqlQuery)) {

        // Now, iterate over the result set and fill the table
        while (rs.next()) {
            List<Object> row = new ArrayList<>();
            row.add(rs.getString("id"));
            row.add(rs.getString("name"));
            row.add(rs.getString("gender"));
            row.add(rs.getString("email"));
            row.add(rs.getString("date"));
            row.add(rs.getString("checkin"));
            row.add(rs.getString("checkout"));
            row.add(rs.getString("workduration"));

            // Count present and absent based on checkout value
            if (rs.getString("checkout") == null) {
                absentCount++;  // Increment absent count if checkout is null
            } else {
                presentCount++;  // Increment present count if checkout is not null
            }

            model.addRow(row.toArray());
        }

        // After populating the table, update the present and absent count labels
        lblPresent.setVisible(true);
        lblAbsent.setVisible(true);
        presentLBL.setVisible(true);
        absentLBL.setVisible(true);

        lblPresent.setText(String.valueOf(presentCount));
        lblAbsent.setText(String.valueOf(absentCount));

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Something Went Wrong: " + ex.getMessage());
    }
}

private Long countWeekdays(LocalDate start, LocalDate end) {
    long count = 0;
    LocalDate date = start;

    // Loop through the dates and count weekdays (excluding Saturday and Sunday)
    while (!date.isAfter(end)) {
        if (date.getDayOfWeek() != DayOfWeek.SATURDAY && date.getDayOfWeek() != DayOfWeek.SUNDAY) {
            count++;
        }
        date = date.plusDays(1); // Move to the next day
    }

    return count;
}


}
